// Code generated by protoc-gen-go.
// source: parser.proto
// DO NOT EDIT!

/*
Package parser is a generated protocol buffer package.

It is generated from these files:
	parser.proto

It has these top-level messages:
	ParseRequest
	ParseReply
*/
package caspercloud

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type ParseRequestType int32

const (
	ParseRequestType_Eml              ParseRequestType = 0
	ParseRequestType_Html             ParseRequestType = 1
	ParseRequestType_Honeycomb        ParseRequestType = 2
	ParseRequestType_TaobaoShop       ParseRequestType = 3
	ParseRequestType_Honeycomb_Taobao ParseRequestType = 4
)

var ParseRequestType_name = map[int32]string{
	0: "Eml",
	1: "Html",
	2: "Honeycomb",
	3: "TaobaoShop",
}
var ParseRequestType_value = map[string]int32{
	"Eml":        0,
	"Html":       1,
	"Honeycomb":  2,
	"TaobaoShop": 3,
}

func (x ParseRequestType) String() string {
	return proto.EnumName(ParseRequestType_name, int32(x))
}

type ParseRequest struct {
	ClientName  string           `protobuf:"bytes,1,opt" json:"ClientName,omitempty"`
	Tmpl        string           `protobuf:"bytes,2,opt" json:"Tmpl,omitempty"`
	RowKey      string           `protobuf:"bytes,3,opt" json:"RowKey,omitempty"`
	UserName    string           `protobuf:"bytes,4,opt" json:"UserName,omitempty"`
	PublicKey   string           `protobuf:"bytes,5,opt" json:"PublicKey,omitempty"`
	PrivateKey  string           `protobuf:"bytes,6,opt" json:"PrivateKey,omitempty"`
	Secret      string           `protobuf:"bytes,7,opt" json:"Secret,omitempty"`
	IsZip       bool             `protobuf:"varint,8,opt" json:"IsZip,omitempty"`
	Data        []string         `protobuf:"bytes,9,rep" json:"Data,omitempty"`
	ParsedData  string           `protobuf:"bytes,10,opt" json:"ParsedData,omitempty"`
	ReqType     ParseRequestType `protobuf:"varint,11,opt,enum=parser.ParseRequestType" json:"ReqType,omitempty"`
	FetchStatus string           `protobuf:"bytes,12,opt" json:"FetchStatus,omitempty"`
	// DataMetaInfo is responsed for Data, DataMetaInfo[index] maps Data[index]
	DataMetaInfo []string `protobuf:"bytes,13,rep" json:"DataMetaInfo,omitempty"`
}

func (m *ParseRequest) Reset()         { *m = ParseRequest{} }
func (m *ParseRequest) String() string { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()    {}

type ParseReply struct {
	ServerName       string `protobuf:"bytes,1,opt" json:"ServerName,omitempty"`
	IsParsedSucced   bool   `protobuf:"varint,2,opt" json:"IsParsedSucced,omitempty"`
	WriteHbaseSucced bool   `protobuf:"varint,3,opt" json:"WriteHbaseSucced,omitempty"`
}

func (m *ParseReply) Reset()         { *m = ParseReply{} }
func (m *ParseReply) String() string { return proto.CompactTextString(m) }
func (*ParseReply) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("parser.ParseRequestType", ParseRequestType_name, ParseRequestType_value)
}

// Client API for Parser service

type ParserClient interface {
	// Sends a parse request
	ProcessParseRequest(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseReply, error)
}

type parserClient struct {
	cc *grpc.ClientConn
}

func NewParserClient(cc *grpc.ClientConn) ParserClient {
	return &parserClient{cc}
}

func (c *parserClient) ProcessParseRequest(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseReply, error) {
	out := new(ParseReply)
	err := grpc.Invoke(ctx, "/parser.Parser/ProcessParseRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Parser service

type ParserServer interface {
	// Sends a parse request
	ProcessParseRequest(context.Context, *ParseRequest) (*ParseReply, error)
}

func RegisterParserServer(s *grpc.Server, srv ParserServer) {
	s.RegisterService(&_Parser_serviceDesc, srv)
}

func _Parser_ProcessParseRequest_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(ParseRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ParserServer).ProcessParseRequest(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Parser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parser.Parser",
	HandlerType: (*ParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessParseRequest",
			Handler:    _Parser_ProcessParseRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
